Здесь записан план всей работы. Я постараюсь его записать понятно и доступно.



0. Работа с backtest.

Следует открыть A.cpp.

Чтобы запустить в режиме стратегии, следует присвоить переменной TEST_STRATEGY значение 2.
Чтобы запустить в режиме взаимодействия с биржей, следует присвоить переменной TEST_STRATEGY значение 0.

Если происходит взаимодействие с биржей:
Следует ввести запрашиваемые параметры.

В зависимости от частоты вызова интерфейса будет происходить остановка всего процесса в момент времени t, кратный 100,
и осуществляться запросы пользователя. Все запросы маркет и лимит ордеров будут отосланы в этот момент.
Пользователь может во время запросов:
1) Отправить маркет ордер.
Запрос выглядит так: "тип ордера (покупка или продажа)" "размер ордера" "цена".
пример как купить акций обьемом 1.5:   "buy 1.5"   ИЛИ   "1/0 1.5"
пример как продать акций обьемом 1.2:   "sell 1.2"   ИЛИ   "1/1 1.2"
2) Отправить лимит ордер.
Запрос выглядит так: "тип ордера (ask или bid)" "цена" "размер ордера".
пример как поставить bid-запрос ценой 407.54 и обьемом 0.7:   "bid 407.54 0.7"   ИЛИ   "2/0 407.54 0.7"
пример как поставить ask-запрос ценой 406.32 и обьемом 2.4:   "ask 406.32 2.4"   ИЛИ   "2/1 406.32 2.4"
3) Узнать что с нашим последним лимитным ордером в момент t, кратный 100.
Узнаем, какая доля от него осталась.
Запрос выглядит так: "order_ask" "время_вызова"
пример вызова: "order_ask 3123100"   ИЛИ   "3 3123100"
4) Удалить лимит ордер.
Запрос выглядит так: "delete"
пример вызова: "delete"   ИЛИ   "4"
5) Узнать баланс в момент t, кратный 100.
Выдаст насколько увеличилось или уменьшилось у нас количество акций в момент t, кратный 100, то же
узнаем про денежный счет.
пример вызова: "balance 1233400"   ИЛИ   "5 1233400"
6) Закончить данную сессию запросов и продолжить работу рынка до следующей остановки.
пример вызова: "stop"   ИЛИ   "6"



1. Анализ даты.

Графики построены с использованием python-а, эта часть проекта реализована в файле main.ipynb.
Я построил несколько графиков. 'graphic' + num + '.png' содержит классический график,
где все временные промежутки бьются на num равных частей.
Также есть графики, которые можно увидеть, запустив main.ipynb (я лично работаю с jupyter-notebook,
хз насколько у вас все адекватно будет выглядеть), они оказались более содержательными лично для меня.



2. Backtest

2.1. Маркет ордер.
Реализован довольно просто: доходит до сервера в момент t, кратный 100,
и полностью заполняется по лучшему предложению.

2.2. Лимит ордер.



2.3.
Так как, в целом, мы знаем состояние стакана каждые 100мс и все сделки, то непонятно, как учесть те случаи,
когда кто-то из других игроков решил удалить свой ордер (наверное, в реальности информация о снятии ордера доступна, но
тут данного не предоставлено). Поэтому в случае покупки, мы не знаем, что у кого именно мы купили, и что далее
происходило с исполненным с нашей помощью ордером. Поэтому реализация никак не учитывает наше влияние на рынок.
В целом, конструкция такая: мы имеем стакан в момент t, смотрим все трейды на промежутке [t; t + 100). Просто берем
новый стакан в момент t + 100 и идем дальше.




3. Стратегия.
Я решил написать простую стратегию, которая при отклонении в более чем DELTA от средней цены регистрирует
ask/bid-запрос обьемом VOLUME по нынешней цене на рынке в зависимости от того, в какую сторону мы отклонились.
DELTA и VOLUME являются перебираемыми параметрами.
Чтобы запустить в режиме стратегии, следует присвоить переменной TEST_STRATEGY (лежит в A.cpp) значение 2.
Логи выполнения стратегии можно увидеть в папке output_dir





